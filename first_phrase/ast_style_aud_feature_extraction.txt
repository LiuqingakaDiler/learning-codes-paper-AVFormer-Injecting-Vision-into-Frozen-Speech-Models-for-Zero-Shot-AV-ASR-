class ASTModel(nn.Module):
    """
    The AST model.
    :param label_dim: the label dimension, i.e., the number of total classes, it is 527 for AudioSet, 50 for ESC-50, and 35 for speechcommands v2-35
    :param fstride: the stride of patch spliting on the frequency dimension, for 16*16 patchs, fstride=16 means no overlap, fstride=10 means overlap of 6
    :param tstride: the stride of patch spliting on the time dimension, for 16*16 patchs, tstride=16 means no overlap, tstride=10 means overlap of 6
    :param input_fdim: the number of frequency bins of the input spectrogram
    :param input_tdim: the number of time frames of the input spectrogram
    :param imagenet_pretrain: if use ImageNet pretrained model
    :param audioset_pretrain: if use full AudioSet and ImageNet pretrained model
    :param model_size: the model size of AST, should be in [tiny224, small224, base224, base384], base224 and base 384 are same model, but are trained differently during ImageNet pretraining.
    """
    def __init__(self, label_dim=527, fstride=10, tstride=10, input_fdim=128, input_tdim=1024, imagenet_pretrain=True, audioset_pretrain=False, model_size='base384', verbose=True):

        super(ASTModel, self).__init__()
        assert timm.__version__ == '0.4.5', 'Please use timm == 0.4.5, the code might not be compatible with newer versions.'

        if verbose == True:
            print('---------------AST Model Summary---------------')
            print('ImageNet pretraining: {:s}, AudioSet pretraining: {:s}'.format(str(imagenet_pretrain),str(audioset_pretrain)))
        # override timm input shape restriction
        timm.models.vision_transformer.PatchEmbed = PatchEmbed

        # if AudioSet pretraining is not used (but ImageNet pretraining may still apply)
        if audioset_pretrain == False:
            if model_size == 'tiny224':
                self.v = timm.create_model('vit_deit_tiny_distilled_patch16_224', pretrained=imagenet_pretrain)
            elif model_size == 'small224':
                self.v = timm.create_model('vit_deit_small_distilled_patch16_224', pretrained=imagenet_pretrain)
            elif model_size == 'base224':
                self.v = timm.create_model('vit_deit_base_distilled_patch16_224', pretrained=imagenet_pretrain)
            elif model_size == 'base384':
                self.v = timm.create_model('vit_deit_base_distilled_patch16_384', pretrained=imagenet_pretrain)
            else:
                raise Exception('Model size must be one of tiny224, small224, base224, base384.')
            self.original_num_patches = self.v.patch_embed.num_patches
            self.oringal_hw = int(self.original_num_patches ** 0.5)
            self.original_embedding_dim = self.v.pos_embed.shape[2]
            self.mlp_head = nn.Sequential(nn.LayerNorm(self.original_embedding_dim), nn.Linear(self.original_embedding_dim, label_dim))

            # automatcially get the intermediate shape
            f_dim, t_dim = self.get_shape(fstride, tstride, input_fdim, input_tdim)
            num_patches = f_dim * t_dim
            self.v.patch_embed.num_patches = num_patches
            if verbose == True:
                print('frequncey stride={:d}, time stride={:d}'.format(fstride, tstride))
                print('number of patches={:d}'.format(num_patches))

            # the linear projection layer
            new_proj = torch.nn.Conv2d(1, self.original_embedding_dim, kernel_size=(16, 16), stride=(fstride, tstride))
            if imagenet_pretrain == True:
                new_proj.weight = torch.nn.Parameter(torch.sum(self.v.patch_embed.proj.weight, dim=1).unsqueeze(1))
                new_proj.bias = self.v.patch_embed.proj.bias
            self.v.patch_embed.proj = new_proj

            # the positional embedding
            if imagenet_pretrain == True:
                # get the positional embedding from deit model, skip the first two tokens (cls token and distillation token), reshape it to original 2D shape (24*24).
                new_pos_embed = self.v.pos_embed[:, 2:, :].detach().reshape(1, self.original_num_patches, self.original_embedding_dim).transpose(1, 2).reshape(1, self.original_embedding_dim, self.oringal_hw, self.oringal_hw)
                # cut (from middle) or interpolate the second dimension of the positional embedding
                if t_dim <= self.oringal_hw:
                    new_pos_embed = new_pos_embed[:, :, :, int(self.oringal_hw / 2) - int(t_dim / 2): int(self.oringal_hw / 2) - int(t_dim / 2) + t_dim]
                else:
                    new_pos_embed = torch.nn.functional.interpolate(new_pos_embed, size=(self.oringal_hw, t_dim), mode='bilinear')
                # cut (from middle) or interpolate the first dimension of the positional embedding
                if f_dim <= self.oringal_hw:
                    new_pos_embed = new_pos_embed[:, :, int(self.oringal_hw / 2) - int(f_dim / 2): int(self.oringal_hw / 2) - int(f_dim / 2) + f_dim, :]
                else:
                    new_pos_embed = torch.nn.functional.interpolate(new_pos_embed, size=(f_dim, t_dim), mode='bilinear')
                # flatten the positional embedding
                new_pos_embed = new_pos_embed.reshape(1, self.original_embedding_dim, num_patches).transpose(1,2)
                # concatenate the above positional embedding with the cls token and distillation token of the deit model.
                self.v.pos_embed = nn.Parameter(torch.cat([self.v.pos_embed[:, :2, :].detach(), new_pos_embed], dim=1))
            else:
                # if not use imagenet pretrained model, just randomly initialize a learnable positional embedding
                # TODO can use sinusoidal positional embedding instead
                new_pos_embed = nn.Parameter(torch.zeros(1, self.v.patch_embed.num_patches + 2, self.original_embedding_dim))
                self.v.pos_embed = new_pos_embed
                trunc_normal_(self.v.pos_embed, std=.02)

        # now load a model that is pretrained on both ImageNet and AudioSet
        elif audioset_pretrain == True:
            if audioset_pretrain == True and imagenet_pretrain == False:
                raise ValueError('currently model pretrained on only audioset is not supported, please set imagenet_pretrain = True to use audioset pretrained model.')
            if model_size != 'base384':
                raise ValueError('currently only has base384 AudioSet pretrained model.')
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
            if os.path.exists('../../pretrained_models/audioset_10_10_0.4593.pth') == False:
                # this model performs 0.4593 mAP on the audioset eval set
                audioset_mdl_url = 'https://www.dropbox.com/s/cv4knew8mvbrnvq/audioset_0.4593.pth?dl=1'
                wget.download(audioset_mdl_url, out='../../pretrained_models/audioset_10_10_0.4593.pth')
            sd = torch.load('../../pretrained_models/audioset_10_10_0.4593.pth', map_location=device)
            audio_model = ASTModel(label_dim=527, fstride=10, tstride=10, input_fdim=128, input_tdim=1024, imagenet_pretrain=False, audioset_pretrain=False, model_size='base384', verbose=False)
            audio_model = torch.nn.DataParallel(audio_model)
            audio_model.load_state_dict(sd, strict=False)
            self.v = audio_model.module.v
            self.original_embedding_dim = self.v.pos_embed.shape[2]
            self.mlp_head = nn.Sequential(nn.LayerNorm(self.original_embedding_dim), nn.Linear(self.original_embedding_dim, label_dim))

            f_dim, t_dim = self.get_shape(fstride, tstride, input_fdim, input_tdim)
            num_patches = f_dim * t_dim
            self.v.patch_embed.num_patches = num_patches
            if verbose == True:
                print('frequncey stride={:d}, time stride={:d}'.format(fstride, tstride))
                print('number of patches={:d}'.format(num_patches))

            new_pos_embed = self.v.pos_embed[:, 2:, :].detach().reshape(1, 1212, 768).transpose(1, 2).reshape(1, 768, 12, 101)
            # if the input sequence length is larger than the original audioset (10s), then cut the positional embedding
            if t_dim < 101:
                new_pos_embed = new_pos_embed[:, :, :, 50 - int(t_dim/2): 50 - int(t_dim/2) + t_dim]
            # otherwise interpolate
            else:
                new_pos_embed = torch.nn.functional.interpolate(new_pos_embed, size=(12, t_dim), mode='bilinear')
            if f_dim < 12:
                new_pos_embed = new_pos_embed[:, :, 6 - int(f_dim/2): 6 - int(f_dim/2) + f_dim, :]
            # otherwise interpolate
            elif f_dim > 12:
                new_pos_embed = torch.nn.functional.interpolate(new_pos_embed, size=(f_dim, t_dim), mode='bilinear')
            new_pos_embed = new_pos_embed.reshape(1, 768, num_patches).transpose(1, 2)
            self.v.pos_embed = nn.Parameter(torch.cat([self.v.pos_embed[:, :2, :].detach(), new_pos_embed], dim=1))

    def get_shape(self, fstride, tstride, input_fdim=128, input_tdim=1024):
        test_input = torch.randn(1, 1, input_fdim, input_tdim)
        test_proj = nn.Conv2d(1, self.original_embedding_dim, kernel_size=(16, 16), stride=(fstride, tstride))
        test_out = test_proj(test_input)
        f_dim = test_out.shape[2]
        t_dim = test_out.shape[3]
        return f_dim, t_dim

    @autocast()
    def forward(self, x):
        """
        :param x: the input spectrogram, expected shape: (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
        :return: prediction
        """
        # expect input x = (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
        x = x.unsqueeze(1)
        x = x.transpose(2, 3)

        B = x.shape[0]
        x = self.v.patch_embed(x)
        cls_tokens = self.v.cls_token.expand(B, -1, -1)
        dist_token = self.v.dist_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, dist_token, x), dim=1)
        x = x + self.v.pos_embed
        x = self.v.pos_drop(x)
        for blk in self.v.blocks:
            x = blk(x)
        x = self.v.norm(x)
        x = (x[:, 0] + x[:, 1]) / 2

        x = self.mlp_head(x)
        return x

if __name__ == '__main__':
    input_tdim = 100
    ast_mdl = ASTModel(input_tdim=input_tdim)
    # input a batch of 10 spectrogram, each with 100 time frames and 128 frequency bins
    test_input = torch.rand([10, input_tdim, 128])
    test_output = ast_mdl(test_input)
    # output should be in shape [10, 527], i.e., 10 samples, each with prediction of 527 classes.
    print(test_output.shape)

    input_tdim = 256
    ast_mdl = ASTModel(input_tdim=input_tdim,label_dim=50, audioset_pretrain=True)
    # input a batch of 10 spectrogram, each with 512 time frames and 128 frequency bins
    test_input = torch.rand([10, input_tdim, 128])
    test_output = ast_mdl(test_input)
    # output should be in shape [10, 50], i.e., 10 samples, each with prediction of 50 classes.
    print(test_output.shape)
	
========================================= I am a boring seperation line ==================================================

# BEST-RQ model

class BestRQ(nn.Module):
    def __init__(
        self,
        codebook_size: int,
        codebook_dim: int,
        *,
        conformer: ConformerWrapper,
        sample_rate: int = 24_000,
        n_mels: int = 80,
        win_length: int = 960,
        hop_length: Optional[int] = None,
        n_fft: Optional[int] = None,
    ):
        super().__init__()

        self.rpq = nn.Sequential(
            nn.LayerNorm(n_mels, elementwise_affine = True),
            RandomProjectionQuantizer(
                dim = n_mels,
                codebook_size = codebook_size,
                codebook_dim = codebook_dim,
                norm = False
            )
        )
        self.rpq.requires_grad = False

        hop_length = default(hop_length, win_length // 4)

        self.feature_extractor = nn.Sequential(
            T.MelSpectrogram(
                sample_rate = sample_rate,
                n_mels = n_mels,
                win_length = win_length,
                hop_length = hop_length,
                n_fft = default(n_fft, win_length)
            ),
            T.AmplitudeToDB()
        )
        self.feature_extractor.requires_grad = False

        self.conformer = conformer

        self.pad_id = 0
        self.eos_id = codebook_size + 1

    def load(self, path, strict = True):
        path = Path(path)
        assert path.exists()
        pkg = torch.load(str(path), map_location = 'cpu')
        try:
            self.load_state_dict(pkg['model'], strict = strict)
        except Exception:
            self.load_state_dict(pkg['encoder'], strict = strict)
        return pkg

    @torch.no_grad()
    def extract_features(self, x):
        if x.device.type == 'mps':
            # work around ComplexFloat being unavailable with mps
            return self.feature_extractor.cpu()(x.cpu()).to(x.device)
        else:
            return self.feature_extractor(x)

    def forward(
        self,
        x = None,
        labels = None,
        mask = None,
        return_labels = False,
        return_emb = False,
        return_layer_output: Optional[int] = None
    ):
        assert exists(x) or exists(labels), "either input or labels must be provided"

        if exists(x) and not exists(labels):
            with torch.no_grad():
                features = self.extract_features(x)

                # project labels from features

                features = rearrange(features, "b c n -> b n c")
                labels = self.rpq(features)

                # offset for the pad id

                labels = torch.where(labels != self.pad_id, labels + 1, self.pad_id)

        if return_labels:
            return labels

        if not exists(mask):
            mask = torch.cat([rearrange(x != self.pad_id, "n -> 1 n") for x in labels.unbind(dim = 0)], dim = 0)

        ###################################################################
        """
        :param ast_x: the input spectrogram, expected shape: (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
        :return: prediction
        """
        # expect input ast_x = (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
        # ast_x = ast_x.unsqueeze(1)
        # ast_x = ast_x.transpose(2, 3)
		features = features.unsqueeze(1)
		features = features.transpose(2, 3)

        # B = ast_x.shape[0]
        # ast_x = self.v.patch_embed(ast_x)
		# tokenizer+linear projection in AST
        features = self.v.patch_embed(features) # audio_tokens tN
		#####################################################################

        # ? 5, conformer encoder(a_tokens, labels?, mask?) for first phrase
		# Alternative case
		# 3 forward xxx-formaer block and its subsampling layer
        # out, out_mask = self.encoder(masked_xs, xs_lens)
        outputs = self.conformer(
            labels,
            mask = mask,
            return_layer_output = return_layer_output,
            return_emb = return_emb
        )

        return outputs
		
		
# set up the encoder

brq = BestRQ(
    codebook_size = 1024,
    codebook_dim = 16,
    sample_rate = 24_000,
    n_mels = 80,
    win_length = 960,
    hop_length = 960 // 3,
    conformer = ConformerWrapper(
        num_tokens = 1024,
        conformer = dict(
            dim = 1024,
            depth = 24,
            heads = 16,
            conv_kernel_size = 5,
            ff_mult = 4,
            attn_dropout = 0.1,
            ff_dropout = 0.1,
            conv_dropout = 0.1,
            attn_flash = False
        )
    )
).to(accelerator)

brq.load(pretrained_checkpoint)

for wave in tqdm(ds):
    with torch.no_grad():
        activation = brq(rearrange(wave, "n -> 1 n").to(accelerator), return_layer_output = output_layer)
        activations.append(activation.cpu())
		
# The order of processing audio inputs should be totally shuffled, break into pieces and reorder
# 1, audio input
# 2, audio spec/feature extraction
# 3, audio rpq(unmasked_fea) -> labels: unmasked_labels
# 4.1, mask(labels) -> masked_fea/masked_labels
# 4.2, audio tokenizer(audio spec)
# 5, conformer_encoder(a_tokens, unmasked_labels?, masked_labels?) for first phrase

# Original order
# 1, audio input
# 2, audio spec/feature extraction
# 3, audio spec mask -> masked_fea, unmasked_fea
# 4.1, rpq(unmasked_fea) -> target_ids/labels
# 4.2, conformer_encoder(masked_fea)

============================================ I am a boring seperation line ===================================
class Mlp_hot(nn.Module):
    def __init__(
        self,
        in_features,
        hidden_features=None,
        out_features=None,
        act_layer=nn.GELU,
        drop=0.0,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)  # D -> B
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features) # B -> D
        self.drop = nn.Dropout(drop)

    # 2-layered MLP with a residual connection
    def forward(self, x): # x should be the audio tokens
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

# dim: int,
# mlp_ratio: int = 4,

# 2-layered MLP with a residual connection
self.norm_1 = nn.LayerNorm(dim)
self.norm_2 = nn.LayerNorm(dim)
mlp_hidden_dim = int(mlp_ratio * dim) # B << D
self.mlp_hot = Mlp_hot(
    in_features=dim,
    hidden_features=mlp_hidden_dim,
    act_layer=nn.GELU,
    drop=ffn_dropout_rate,
)

# Proposed order from paper for first phrase
# 1, audio input
# 2, audio spec/feature extraction
# 3, tokenizer(audio_spec) -> a_tokens : unmasked_fea
# 3.5, FF_Adapters_Hot(a_tokens) -> a_tokens
# 4, bestrq_conformer_encoder_Frozen(a_tokens)
# 4.1, mask(a_tokens) -> masked_fea, unmasked_fea
# 4.2, rpq(unmasked_fea) -> target_ids/labels
# 4.3, conformer_encoder(masked_fea)

# Another thing is to verify the dimensionality of rpq and audio features


###################################################################
"""
:param ast_x: the input spectrogram, expected shape: (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
:return: prediction
"""
# expect input ast_x = (batch_size, time_frame_num, frequency_bins), e.g., (12, 1024, 128)
# ast_x = ast_x.unsqueeze(1)
# ast_x = ast_x.transpose(2, 3)
features = features.unsqueeze(1)
features = features.transpose(2, 3)

# B = ast_x.shape[0]
# ast_x = self.v.patch_embed(ast_x)
# frozen tokenizer+linear projection in AST
audio_tokens = self.v.patch_embed(features) # audio_tokens tN

# Lightweight FF adaptor Hot in first phrase
ff_adapted_audio_tokens = audio_tokens + self.mlp_hot(self.norm_2(audio_tokens))

# BestRQModel.forward() should return encoded features not only logits for later decode process in second phrase
# change bestrq_model.py forward() for frozen model inference usage
##? For first phrase, since the purpose is to train the adaper, the frozen model should return logits as well as acc
brq = BestRQModel(...).to(accelerator)
brq.load(pretrained_checkpoint)
for wave in tqdm(ds):
    with torch.no_grad():
        # activation = brq(rearrange(wave, "n -> 1 n").to(accelerator))
        # activations.append(activation.cpu())
		# encoded_v_contextualized_a_tokens = brq(ff_adapted_audio_tokens) # for second phrase
		#?acc, loss_for_adaptor, ... = brq(ff_adapted_audio_tokens) # for first phrase
		encoded_a_tokens = brq(ff_adapted_audio_tokens) # t^N for first phrase
#####################################################################