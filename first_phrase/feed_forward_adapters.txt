class Mlp_hot(nn.Module):
    def __init__(
        self,
        in_features,
        hidden_features=None,
        out_features=None,
        act_layer=nn.GELU,
        drop=0.0,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)  # D -> B
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features) # B -> D
        self.drop = nn.Dropout(drop)

    # 2-layered MLP with a residual connection
    def forward(self, x): # x should be the audio tokens
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

# dim: int,
# mlp_ratio: int = 4,

# 2-layered MLP with a residual connection
self.norm_1 = nn.LayerNorm(dim)
self.norm_2 = nn.LayerNorm(dim)
mlp_hidden_dim = int(mlp_ratio * dim) # B << D
self.mlp = Mlp_hot(
    in_features=dim,
    hidden_features=mlp_hidden_dim,
    act_layer=nn.GELU,
    drop=ffn_dropout_rate,
)
ff_adapted_audio_tokens = x + self.mlp(self.norm_2(x))
